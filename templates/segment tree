int tree[4*nmax];

void build(int node, int start, int endd)
{
    if(start==endd)
    {
        tree[node]=ara[start];
    }else
    {
        int mid=(start+endd)/2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,endd);

        tree[node]=tree[2*node]+tree[2*node+1];
    }
}

void update(int node, int start, int endd, int idx, int val)
{

    if(start==endd)
    {
        ara[idx]+=val;
        tree[node]+=val;

    }else
    {
        int mid=(start+endd)/2;

        if(idx>=start and idx<=mid)
            update(2*node,start,mid,idx,val);
        else
            update(2*node+1,mid+1,endd,idx,val);


        tree[node]=tree[2*node]+tree[2*node+1];
    }

}

int query(int node,int start,int endd, int l, int r)
{
    if(start>=l and endd<=r)
        return tree[node];

    if(start>r or endd<l)
        return 0 ;

    int mid=(start+endd)/2;
    int p1=query(2*node,start,mid,l,r);
    int p2=query(2*node+1,mid+1,endd,l,r);
    int ans=p1+p2;

    return ans;

}


void updateRange(int node, int start, int end, int l, int r, int val)
{
    if(lazy[node] != 0)
    { 
        // This node needs to be updated
        tree[node] += (end - start + 1) * lazy[node];    // Update it
        if(start != end)
        {
            lazy[node*2] += lazy[node];                  // Mark child as lazy
            lazy[node*2+1] += lazy[node];                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start > end or start > r or end < l)              // Current segment is not within range [l, r]
        return;
    if(start >= l and end <= r)
    {
        // Segment is fully within range
        tree[node] += (end - start + 1) * val;
        if(start != end)
        {
            // Not leaf node
            lazy[node*2] += val;
            lazy[node*2+1] += val;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r, val);        // Updating left child
    updateRange(node*2 + 1, mid + 1, end, l, r, val);   // Updating right child
    tree[node] = tree[node*2] + tree[node*2+1];        // Updating root with max value 
}

int queryRange(int node, int start, int end, int l, int r)
{
    if(start > end or start > r or end < l)
        return 0;         // Out of range
    if(lazy[node] != 0)
    {
        // This node needs to be updated
        tree[node] += (end - start + 1) * lazy[node];            // Update it
        if(start != end)
        {
            lazy[node*2] += lazy[node];         // Mark child as lazy
            lazy[node*2+1] += lazy[node];    // Mark child as lazy
        }
        lazy[node] = 0;                 // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tree[node];
    int mid = (start + end) / 2;
    int p1 = queryRange(node*2, start, mid, l, r);         // Query left child
    int p2 = queryRange(node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 + p2);
}
