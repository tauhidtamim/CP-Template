# NOVICE APPROACH: 

int par[N], level[N];
vector<int>adj[N];
bool vis[N];

void dfs(int u, int from)
{
    if(vis[u])
        return;

    vis[u]=true;
    level[u]=level[from]+1;
    par[u]=from;

    for(auto to: adj[u]){

        if(vis[to]==0)
            dfs(to,u);
    }

}

int LCA(int u, int v)
{
    if(level[u] < level[v]){
	swap(u,v);
    }

    int d = level[u]-level[v];
    while(d>0){

       u=par[u];
       d--;

    }

    if(u==v)return u;

    while(par[u]!=par[v]){
        u=par[u];
        v=par[v];
    }

    return par[u];

}

int main(){

    level[0]=-1;
    par[0]=1;
    for(int i=1;i<=n;i++){
        par[i]=i;
    }

    dfs(1,0);
    par[1]=1;
}


#BINARY LIFTING:


const int N = 1010;
const int maxN = __lg(N);

int level[N], sparse[N][maxN+1];//sparse[i][j] -> 2^j th parent of node i
vector<int>adj[N];

int n;
void dfs(int u, int from, int lvl)
{
    level[u]=lvl;
    sparse[u][0]=from;

    for(auto to: adj[u]){

        if(to != from){
            dfs(to,u,lvl+1);
        }
    }

}

void init()
{
    dfs(1,-1,0);

    for(int j=1;j<=maxN;j++){
        for(int i=1;i<=n;i++){

            if(sparse[i][j-1]!=-1){
                int par = sparse[i][j-1];
                sparse[i][j] = sparse[par][j-1];
            }

        }
    }

}

int LCA(int u, int v)
{
    if(level[u] < level[v]){
        swap(u,v);
    }

    int d = level[u]-level[v];

    while(d>0){

        int j = __lg(d);
        u = sparse[u][j];
        d-= (1<<j);
    }

    if(u==v)
        return u;

    for(int i=maxN;i>=0;i--){

        if(sparse[u][i]!=-1 and sparse[u][i]!=sparse[v][i]){
            u=sparse[u][i];
            v=sparse[v][i];
        }
    }

    return sparse[u][0];

}

int main()
{
    reset(sparse,-1);
    init();
}






